// Code generated by "stringer -type=TreeType -trimprefix=TreeType_ -output=tree_string.go tree.go"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TreeType_None_Default-0]
	_ = x[TreeType_SourceMain-1]
	_ = x[TreeType_ContractDef-2]
	_ = x[TreeType_ContractPart-3]
	_ = x[TreeType_FuncDef-4]
	_ = x[TreeType_DataDef-5]
	_ = x[TreeType_DataPart-6]
	_ = x[TreeType_SettingsDef-7]
	_ = x[TreeType_Parameter-8]
	_ = x[TreeType_ParameterList-9]
	_ = x[TreeType_ReturnParameters-10]
	_ = x[TreeType_StatementList-11]
	_ = x[TreeType_Block-12]
	_ = x[TreeType_Assignment-13]
	_ = x[TreeType_VarDef-14]
	_ = x[TreeType_Kind_ControlStmt-15]
	_ = x[TreeType_IfStmt-16]
	_ = x[TreeType_ElseStmt-17]
	_ = x[TreeType_IncDecStmt-18]
	_ = x[TreeType_WhileStmt-19]
	_ = x[TreeType_ContinueStmt-20]
	_ = x[TreeType_BreakStmt-21]
	_ = x[TreeType_ReturnStmt-22]
	_ = x[TreeType_FuncSignature-23]
	_ = x[TreeType_FuncTail-24]
	_ = x[TreeType_Kind_ErrorStmt-25]
	_ = x[TreeType_ErrorStmt-26]
	_ = x[TreeType_ErrWarningStmt-27]
	_ = x[TreeType_ErrInfoStmt-28]
	_ = x[TreeType_Kind_Literal-29]
	_ = x[TreeType_DecimalLiteral-30]
	_ = x[TreeType_BinaryLiteral-31]
	_ = x[TreeType_OctalLiteral-32]
	_ = x[TreeType_HexLiteral-33]
	_ = x[TreeType_FloatLiteral-34]
	_ = x[TreeType_InterpretedStringLiteral-35]
	_ = x[TreeType_RawStringLiteral-36]
	_ = x[TreeType_BooleanLiteral-37]
	_ = x[TreeType_NIL-38]
	_ = x[TreeType_Identifier-39]
	_ = x[TreeType_DollarIdentifier-40]
	_ = x[TreeType_AtIdentifier-41]
	_ = x[TreeType_Kind_Expr-42]
	_ = x[TreeType_PrimaryExpr-43]
	_ = x[TreeType_IndexExpr-44]
	_ = x[TreeType_SliceExpr-45]
	_ = x[TreeType_MapExpr-46]
	_ = x[TreeType_ArrayExpr-47]
	_ = x[TreeType_ContractCall-48]
	_ = x[TreeType_UnaryOpExpr-49]
	_ = x[TreeType_MulOpExpr-50]
	_ = x[TreeType_RelOpExpr-51]
	_ = x[TreeType_LogicalOpExpr-52]
	_ = x[TreeType_AddOpExpr-53]
	_ = x[TreeType_Operand-54]
	_ = x[TreeType_PairList-55]
	_ = x[TreeType_Pair-56]
	_ = x[TreeType_Arguments-57]
	_ = x[TreeType_ArrayList-58]
}

const _TreeType_name = "None_DefaultSourceMainContractDefContractPartFuncDefDataDefDataPartSettingsDefParameterParameterListReturnParametersStatementListBlockAssignmentVarDefKind_ControlStmtIfStmtElseStmtIncDecStmtWhileStmtContinueStmtBreakStmtReturnStmtFuncSignatureFuncTailKind_ErrorStmtErrorStmtErrWarningStmtErrInfoStmtKind_LiteralDecimalLiteralBinaryLiteralOctalLiteralHexLiteralFloatLiteralInterpretedStringLiteralRawStringLiteralBooleanLiteralNILIdentifierDollarIdentifierAtIdentifierKind_ExprPrimaryExprIndexExprSliceExprMapExprArrayExprContractCallUnaryOpExprMulOpExprRelOpExprLogicalOpExprAddOpExprOperandPairListPairArgumentsArrayList"

var _TreeType_index = [...]uint16{0, 12, 22, 33, 45, 52, 59, 67, 78, 87, 100, 116, 129, 134, 144, 150, 166, 172, 180, 190, 199, 211, 220, 230, 243, 251, 265, 274, 288, 299, 311, 325, 338, 350, 360, 372, 396, 412, 426, 429, 439, 455, 467, 476, 487, 496, 505, 512, 521, 533, 544, 553, 562, 575, 584, 591, 599, 603, 612, 621}

func (i TreeType) String() string {
	if i < 0 || i >= TreeType(len(_TreeType_index)-1) {
		return "TreeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TreeType_name[_TreeType_index[i]:_TreeType_index[i+1]]
}
